// ƒê·ªçc file CSV v√† x·ª≠ l√Ω d·ªØ li·ªáu
d3.csv("dataset/data_ggsheet-data.csv").then(function(data) {
    if (!Array.isArray(data) || data.length === 0) {
        console.error("L·ªói: D·ªØ li·ªáu CSV tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá!");
        return;
    }

    // ƒê·∫øm t·ªïng s·ªë ƒë∆°n h√†ng
    let total_orders = new Set(data.map(d => d["M√£ ƒë∆°n h√†ng"])).size;

    // Nh√≥m theo 'M√£ ƒë∆°n h√†ng' -> l·∫•y ra c√°c nh√≥m h√†ng duy nh·∫•t trong m·ªói ƒë∆°n
    let orderGroups = d3.rollups(
        data,
        v => new Set(v.map(d => d["T√™n nh√≥m h√†ng"])), 
        d => d["M√£ ƒë∆°n h√†ng"]
    );

    // ƒê·∫øm s·ªë ƒë∆°n h√†ng c√≥ nh√≥m h√†ng c·ª• th·ªÉ
    let nhomHangCount = new Map();
    orderGroups.forEach(([orderID, nhomSet]) => {
        nhomSet.forEach(nhom => {
            nhomHangCount.set(nhom, (nhomHangCount.get(nhom) || 0) + 1);
        });
    });

    // T·∫°o danh s√°ch d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
    let groupedData = Array.from(nhomHangCount, ([nhomHang, soLuongDon]) => ({
        "Nh√≥m H√†ng": nhomHang,
        "S·ªë ƒë∆°n h√†ng c√≥ nh√≥m n√†y": soLuongDon,
        "X√°c su·∫•t (%)": (soLuongDon / total_orders) * 100
    }));

    // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo X√°c su·∫•t (%)
    groupedData.sort((a, b) => b["X√°c su·∫•t (%)"] - a["X√°c su·∫•t (%)"]);

    // K√≠ch th∆∞·ªõc bi·ªÉu ƒë·ªì
    let maxWidth = 700;
    let maxHeight = 500;
    let margin = { top: 50, right: 80, bottom: 80, left: 180 };
    let width = maxWidth - margin.left - margin.right;
    let height = maxHeight - margin.top - margin.bottom;

    // SVG Container
    let svg = d3.select("#chart7").append("svg")
        .attr("width", maxWidth)
        .attr("height", maxHeight)
        .append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);

    // Tr·ª•c Y (Nh√≥m h√†ng)
    let y = d3.scaleBand()
        .domain(groupedData.map(d => d["Nh√≥m H√†ng"]))
        .range([0, height])
        .padding(0.3);

    // Tr·ª•c X (X√°c su·∫•t %)
    let x = d3.scaleLinear()
        .domain([0, d3.max(groupedData, d => d["X√°c su·∫•t (%)"])])
        .range([0, width]);

    // Danh s√°ch m√†u cho t·ª´ng nh√≥m h√†ng
    let colorScale = d3.scaleOrdinal()
        .domain(groupedData.map(d => d["Nh√≥m H√†ng"]))
        .range(d3.schemeSet3); // Ch·ªçn b·∫£ng m√†u Set3

    // Tr·ª•c Y (T√™n nh√≥m h√†ng)
    svg.append("g")
        .call(d3.axisLeft(y).tickSize(0))
        .selectAll("text")
        .style("font-size", "12px")
        .style("font-weight", "bold")
        .attr("fill", "#4CAF50");

    // Tr·ª•c X (X√°c su·∫•t %)
    svg.append("g")
        .attr("transform", `translate(0, ${height})`)
        .call(d3.axisBottom(x).tickFormat(d => d === 0 ? "0" : `${d.toFixed(0)}%`)) // Hi·ªÉn th·ªã s·ªë nguy√™n n·∫øu l√† 0
        .selectAll("text")
        .style("font-size", "10px");

    // Tooltip
    let tooltip7 = d3.select("body").append("div")
        .attr("class", "tooltip7")
        .style("position", "absolute")
        .style("background", "rgba(39, 44, 47, 0.8)")
        .style("color", "white")
        .style("padding", "6px")
        .style("border-radius", "5px")
        .style("display", "none")
        .style("font-size", "12px");

    // V·∫Ω thanh ngang
    svg.selectAll(".bar")
        .data(groupedData)
        .enter()
        .append("rect")
        .attr("class", "bar")
        .attr("y", d => y(d["Nh√≥m H√†ng"]))
        .attr("x", 0)
        .attr("width", d => x(d["X√°c su·∫•t (%)"]))
        .attr("height", y.bandwidth())
        .attr("fill", d => colorScale(d["Nh√≥m H√†ng"]))
        .on("mouseover", function(event, d) {
            tooltip7.style("display", "block")
                .html(`
                    <strong>${d["Nh√≥m H√†ng"]}</strong><br>
                    üì¶ ƒê∆°n h√†ng: <strong>${d["S·ªë ƒë∆°n h√†ng c√≥ nh√≥m n√†y"]}</strong> <br>
                    üéØ X√°c su·∫•t: <strong>${d["X√°c su·∫•t (%)"] === 0 ? "0" : d["X√°c su·∫•t (%)"].toFixed(1) + "%"}</strong>
                `)
                .style("left", (event.pageX + 10) + "px")
                .style("top", (event.pageY - 30) + "px");
        })
        .on("mouseout", function() {
            tooltip7.style("display", "none");
        });
    svg.selectAll(".label")
    .data(groupedData)
    .enter()
    .append("text")
    .attr("class", "label")
    .attr("x", d => x(d["X√°c su·∫•t (%)"]) + 5) // ƒê·∫©y ch·ªØ ra ngo√†i thanh bar
    .attr("y", d => y(d["Nh√≥m H√†ng"]) + y.bandwidth() / 2 + 5) // Canh gi·ªØa
    .text(d => d["X√°c su·∫•t (%)"] === 0 ? "0" : `${d["X√°c su·∫•t (%)"].toFixed(1)}%`) // Hi·ªÉn th·ªã s·ªë nguy√™n n·∫øu l√† 0
    .style("font-size", "12px")
    .style("font-weight", "bold")
    .attr("fill", "#333");
    // Ti√™u ƒë·ªÅ
    svg.append("text")
        .attr("x", width / 2)
        .attr("y", -20)
        .attr("text-anchor", "middle")
        .style("font-size", "16px")
        .style("font-weight", "bold")
        .attr("fill", "#4CAF50")
        .text("üìä X√°c su·∫•t xu·∫•t hi·ªán c·ªßa Nh√≥m h√†ng");

    // Nh√£n tr·ª•c X
    svg.append("text")
        .attr("x", width / 2)
        .attr("y", height + 40)
        .attr("text-anchor", "middle")
        .style("font-size", "12px")
        .text("X√°c su·∫•t xu·∫•t hi·ªán (%)");
});
